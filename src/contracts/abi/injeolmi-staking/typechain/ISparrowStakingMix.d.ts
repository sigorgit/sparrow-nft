/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISparrowStakingMixInterface extends ethers.utils.Interface {
  functions: {
    "totalNFTs()": FunctionFragment;
    "nft()": FunctionFragment;
    "withdrawableReward(uint256[])": FunctionFragment;
    "accRewardEach()": FunctionFragment;
    "nftRewardDebt(uint256)": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "mix()": FunctionFragment;
    "withdrawReward(uint256[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "totalNFTs", values?: undefined): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawableReward",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "accRewardEach",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftRewardDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "mix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "totalNFTs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accRewardEach",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftRewardDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;

  events: {
    "WithdrawReward(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WithdrawReward"): EventFragment;
}

export type WithdrawRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    owner: string;
    id: BigNumber;
    withdrawedMix: BigNumber;
  }
>;

export class ISparrowStakingMix extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISparrowStakingMixInterface;

  functions: {
    totalNFTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    withdrawableReward(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    accRewardEach(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftRewardDebt(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    mix(overrides?: CallOverrides): Promise<[string]>;

    withdrawReward(
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  totalNFTs(overrides?: CallOverrides): Promise<BigNumber>;

  nft(overrides?: CallOverrides): Promise<string>;

  withdrawableReward(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  accRewardEach(overrides?: CallOverrides): Promise<BigNumber>;

  nftRewardDebt(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  mix(overrides?: CallOverrides): Promise<string>;

  withdrawReward(
    ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    totalNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<string>;

    withdrawableReward(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accRewardEach(overrides?: CallOverrides): Promise<BigNumber>;

    nftRewardDebt(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    mix(overrides?: CallOverrides): Promise<string>;

    withdrawReward(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "WithdrawReward(address,uint256,uint256)"(
      owner?: string | null,
      id?: BigNumberish | null,
      withdrawedMix?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; id: BigNumber; withdrawedMix: BigNumber }
    >;

    WithdrawReward(
      owner?: string | null,
      id?: BigNumberish | null,
      withdrawedMix?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; id: BigNumber; withdrawedMix: BigNumber }
    >;
  };

  estimateGas: {
    totalNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawableReward(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accRewardEach(overrides?: CallOverrides): Promise<BigNumber>;

    nftRewardDebt(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    mix(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawReward(
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    totalNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawableReward(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accRewardEach(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftRewardDebt(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawReward(
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
