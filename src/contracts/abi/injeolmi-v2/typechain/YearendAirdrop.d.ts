/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface YearendAirdropInterface extends ethers.utils.Interface {
  functions: {
    "receiveNew()": FunctionFragment;
    "total()": FunctionFragment;
    "withdrawIjm()": FunctionFragment;
    "newIjm()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "toReceive(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "amount()": FunctionFragment;
    "setNewIjm(address)": FunctionFragment;
    "add(address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "receiveNew",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "total", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawIjm",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newIjm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "toReceive", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(functionFragment: "setNewIjm", values: [string]): string;
  encodeFunctionData(functionFragment: "add", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "receiveNew", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "total", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawIjm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newIjm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNewIjm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class YearendAirdrop extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: YearendAirdropInterface;

  functions: {
    receiveNew(overrides?: Overrides): Promise<ContractTransaction>;

    "receiveNew()"(overrides?: Overrides): Promise<ContractTransaction>;

    total(overrides?: CallOverrides): Promise<[BigNumber]>;

    "total()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawIjm(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawIjm()"(overrides?: Overrides): Promise<ContractTransaction>;

    newIjm(overrides?: CallOverrides): Promise<[string]>;

    "newIjm()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    toReceive(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "toReceive(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    amount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "amount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setNewIjm(
      _newIjm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNewIjm(address)"(
      _newIjm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    add(users: string[], overrides?: Overrides): Promise<ContractTransaction>;

    "add(address[])"(
      users: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  receiveNew(overrides?: Overrides): Promise<ContractTransaction>;

  "receiveNew()"(overrides?: Overrides): Promise<ContractTransaction>;

  total(overrides?: CallOverrides): Promise<BigNumber>;

  "total()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawIjm(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawIjm()"(overrides?: Overrides): Promise<ContractTransaction>;

  newIjm(overrides?: CallOverrides): Promise<string>;

  "newIjm()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  toReceive(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "toReceive(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  amount(overrides?: CallOverrides): Promise<BigNumber>;

  "amount()"(overrides?: CallOverrides): Promise<BigNumber>;

  setNewIjm(
    _newIjm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNewIjm(address)"(
    _newIjm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  add(users: string[], overrides?: Overrides): Promise<ContractTransaction>;

  "add(address[])"(
    users: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    receiveNew(overrides?: CallOverrides): Promise<void>;

    "receiveNew()"(overrides?: CallOverrides): Promise<void>;

    total(overrides?: CallOverrides): Promise<BigNumber>;

    "total()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawIjm(overrides?: CallOverrides): Promise<void>;

    "withdrawIjm()"(overrides?: CallOverrides): Promise<void>;

    newIjm(overrides?: CallOverrides): Promise<string>;

    "newIjm()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    toReceive(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "toReceive(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    amount(overrides?: CallOverrides): Promise<BigNumber>;

    "amount()"(overrides?: CallOverrides): Promise<BigNumber>;

    setNewIjm(_newIjm: string, overrides?: CallOverrides): Promise<void>;

    "setNewIjm(address)"(
      _newIjm: string,
      overrides?: CallOverrides
    ): Promise<void>;

    add(users: string[], overrides?: CallOverrides): Promise<void>;

    "add(address[])"(users: string[], overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    receiveNew(overrides?: Overrides): Promise<BigNumber>;

    "receiveNew()"(overrides?: Overrides): Promise<BigNumber>;

    total(overrides?: CallOverrides): Promise<BigNumber>;

    "total()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawIjm(overrides?: Overrides): Promise<BigNumber>;

    "withdrawIjm()"(overrides?: Overrides): Promise<BigNumber>;

    newIjm(overrides?: CallOverrides): Promise<BigNumber>;

    "newIjm()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    toReceive(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "toReceive(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    amount(overrides?: CallOverrides): Promise<BigNumber>;

    "amount()"(overrides?: CallOverrides): Promise<BigNumber>;

    setNewIjm(_newIjm: string, overrides?: Overrides): Promise<BigNumber>;

    "setNewIjm(address)"(
      _newIjm: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    add(users: string[], overrides?: Overrides): Promise<BigNumber>;

    "add(address[])"(
      users: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    receiveNew(overrides?: Overrides): Promise<PopulatedTransaction>;

    "receiveNew()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    total(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "total()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawIjm(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawIjm()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    newIjm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newIjm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    toReceive(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toReceive(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "amount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNewIjm(
      _newIjm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNewIjm(address)"(
      _newIjm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    add(users: string[], overrides?: Overrides): Promise<PopulatedTransaction>;

    "add(address[])"(
      users: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
