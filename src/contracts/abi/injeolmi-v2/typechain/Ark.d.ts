/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ArkInterface extends ethers.utils.Interface {
  functions: {
    "record()": FunctionFragment;
    "receiveNew()": FunctionFragment;
    "total()": FunctionFragment;
    "users(uint256)": FunctionFragment;
    "records(address)": FunctionFragment;
    "withdrawNew()": FunctionFragment;
    "newIjm()": FunctionFragment;
    "usersCount()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "setNewIjm(address)": FunctionFragment;
    "oldIjm()": FunctionFragment;
    "received(address)": FunctionFragment;
    "step()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setStep(uint256)": FunctionFragment;
    "withdrawOld()": FunctionFragment;
    "sendOld()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "record", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveNew",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "total", values?: undefined): string;
  encodeFunctionData(functionFragment: "users", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "records", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawNew",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newIjm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setNewIjm", values: [string]): string;
  encodeFunctionData(functionFragment: "oldIjm", values?: undefined): string;
  encodeFunctionData(functionFragment: "received", values: [string]): string;
  encodeFunctionData(functionFragment: "step", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOld",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sendOld", values?: undefined): string;

  decodeFunctionResult(functionFragment: "record", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receiveNew", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "total", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "records", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newIjm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usersCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNewIjm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oldIjm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "received", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOld",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendOld", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Ark extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ArkInterface;

  functions: {
    record(overrides?: Overrides): Promise<ContractTransaction>;

    "record()"(overrides?: Overrides): Promise<ContractTransaction>;

    receiveNew(overrides?: Overrides): Promise<ContractTransaction>;

    "receiveNew()"(overrides?: Overrides): Promise<ContractTransaction>;

    total(overrides?: CallOverrides): Promise<[BigNumber]>;

    "total()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    users(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "users(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    records(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "records(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawNew(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawNew()"(overrides?: Overrides): Promise<ContractTransaction>;

    newIjm(overrides?: CallOverrides): Promise<[string]>;

    "newIjm()"(overrides?: CallOverrides): Promise<[string]>;

    usersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "usersCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    setNewIjm(
      _newIjm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNewIjm(address)"(
      _newIjm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    oldIjm(overrides?: CallOverrides): Promise<[string]>;

    "oldIjm()"(overrides?: CallOverrides): Promise<[string]>;

    received(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "received(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    step(overrides?: CallOverrides): Promise<[BigNumber]>;

    "step()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStep(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStep(uint256)"(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawOld(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawOld()"(overrides?: Overrides): Promise<ContractTransaction>;

    sendOld(overrides?: Overrides): Promise<ContractTransaction>;

    "sendOld()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  record(overrides?: Overrides): Promise<ContractTransaction>;

  "record()"(overrides?: Overrides): Promise<ContractTransaction>;

  receiveNew(overrides?: Overrides): Promise<ContractTransaction>;

  "receiveNew()"(overrides?: Overrides): Promise<ContractTransaction>;

  total(overrides?: CallOverrides): Promise<BigNumber>;

  "total()"(overrides?: CallOverrides): Promise<BigNumber>;

  users(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "users(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  records(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "records(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawNew(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawNew()"(overrides?: Overrides): Promise<ContractTransaction>;

  newIjm(overrides?: CallOverrides): Promise<string>;

  "newIjm()"(overrides?: CallOverrides): Promise<string>;

  usersCount(overrides?: CallOverrides): Promise<BigNumber>;

  "usersCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  setNewIjm(
    _newIjm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNewIjm(address)"(
    _newIjm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  oldIjm(overrides?: CallOverrides): Promise<string>;

  "oldIjm()"(overrides?: CallOverrides): Promise<string>;

  received(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "received(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  step(overrides?: CallOverrides): Promise<BigNumber>;

  "step()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStep(
    _step: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStep(uint256)"(
    _step: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawOld(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawOld()"(overrides?: Overrides): Promise<ContractTransaction>;

  sendOld(overrides?: Overrides): Promise<ContractTransaction>;

  "sendOld()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    record(overrides?: CallOverrides): Promise<void>;

    "record()"(overrides?: CallOverrides): Promise<void>;

    receiveNew(overrides?: CallOverrides): Promise<void>;

    "receiveNew()"(overrides?: CallOverrides): Promise<void>;

    total(overrides?: CallOverrides): Promise<BigNumber>;

    "total()"(overrides?: CallOverrides): Promise<BigNumber>;

    users(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "users(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    records(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "records(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawNew(overrides?: CallOverrides): Promise<void>;

    "withdrawNew()"(overrides?: CallOverrides): Promise<void>;

    newIjm(overrides?: CallOverrides): Promise<string>;

    "newIjm()"(overrides?: CallOverrides): Promise<string>;

    usersCount(overrides?: CallOverrides): Promise<BigNumber>;

    "usersCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    setNewIjm(_newIjm: string, overrides?: CallOverrides): Promise<void>;

    "setNewIjm(address)"(
      _newIjm: string,
      overrides?: CallOverrides
    ): Promise<void>;

    oldIjm(overrides?: CallOverrides): Promise<string>;

    "oldIjm()"(overrides?: CallOverrides): Promise<string>;

    received(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "received(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    step(overrides?: CallOverrides): Promise<BigNumber>;

    "step()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStep(_step: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setStep(uint256)"(
      _step: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawOld(overrides?: CallOverrides): Promise<void>;

    "withdrawOld()"(overrides?: CallOverrides): Promise<void>;

    sendOld(overrides?: CallOverrides): Promise<void>;

    "sendOld()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    record(overrides?: Overrides): Promise<BigNumber>;

    "record()"(overrides?: Overrides): Promise<BigNumber>;

    receiveNew(overrides?: Overrides): Promise<BigNumber>;

    "receiveNew()"(overrides?: Overrides): Promise<BigNumber>;

    total(overrides?: CallOverrides): Promise<BigNumber>;

    "total()"(overrides?: CallOverrides): Promise<BigNumber>;

    users(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "users(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    records(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "records(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawNew(overrides?: Overrides): Promise<BigNumber>;

    "withdrawNew()"(overrides?: Overrides): Promise<BigNumber>;

    newIjm(overrides?: CallOverrides): Promise<BigNumber>;

    "newIjm()"(overrides?: CallOverrides): Promise<BigNumber>;

    usersCount(overrides?: CallOverrides): Promise<BigNumber>;

    "usersCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setNewIjm(_newIjm: string, overrides?: Overrides): Promise<BigNumber>;

    "setNewIjm(address)"(
      _newIjm: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    oldIjm(overrides?: CallOverrides): Promise<BigNumber>;

    "oldIjm()"(overrides?: CallOverrides): Promise<BigNumber>;

    received(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "received(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    step(overrides?: CallOverrides): Promise<BigNumber>;

    "step()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStep(_step: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setStep(uint256)"(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawOld(overrides?: Overrides): Promise<BigNumber>;

    "withdrawOld()"(overrides?: Overrides): Promise<BigNumber>;

    sendOld(overrides?: Overrides): Promise<BigNumber>;

    "sendOld()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    record(overrides?: Overrides): Promise<PopulatedTransaction>;

    "record()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    receiveNew(overrides?: Overrides): Promise<PopulatedTransaction>;

    "receiveNew()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    total(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "total()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    users(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "users(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    records(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "records(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawNew(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawNew()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    newIjm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newIjm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usersCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNewIjm(
      _newIjm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNewIjm(address)"(
      _newIjm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    oldIjm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oldIjm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    received(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "received(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    step(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "step()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStep(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStep(uint256)"(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawOld(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawOld()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sendOld(overrides?: Overrides): Promise<PopulatedTransaction>;

    "sendOld()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
